{
    "type": [
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.2.3 (2023-03-15 ucrt) -- \"Shortstop Beagle\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "roxygen2::roxygenise()",
        "\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m Loading \u001B[34mLadderFuelsR\u001B[38;5;232m\u001B[39m\n\nRestarting R session...\n\n",
        "> ",
        "library(LadderFuelsR)",
        "> ",
        "library(magrittr)",
        "> ",
        "library(dplyr)",
        "\nAttaching package: ‘dplyr’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n",
        "The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "> ",
        "",
        "> ",
        "# LAD profiles derived from normalized ALS data after applying [lad.profile()] function",
        "> ",
        "data_path <- file.path(\"D:/OLGA/R_library/LadderFuelsR/extdata/LAD_profiles.txt\")",
        "> ",
        "LAD_profiles <- read.table(data_path, sep = \"\\t\", header = TRUE)",
        "> ",
        "LAD_profiles$treeID <- factor(LAD_profiles$treeID)",
        "> ",
        "",
        "> ",
        "trees_name1 <- as.character(LAD_profiles$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "metrics_precentile_list1<-list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)) {",
        "+ ",
        "    tree1 <- LAD_profiles |> dplyr::filter(treeID == i)",
        "+ ",
        "    metrics_precentil <- get_gaps_fbhs(tree1)",
        "+ ",
        "    metrics_precentile_list1[[i]] <- metrics_precentil",
        "+ ",
        "}",
        "[1] \"treeID: 1_Eglin_zone1_CROWN\"\n[1] \"treeID: 10_Eglin_zone1_CROWN\"\n[1] \"treeID: 100_Eglin_zone1_CROWN\"\n[1] \"treeID: 101_Eglin_zone1_CROWN\"\n[1] \"treeID: 102_Eglin_zone1_CROWN\"\n[1] \"treeID: 103_Eglin_zone1_CROWN\"\n[1] \"treeID: 104_Eglin_zone1_CROWN\"\n[1] \"treeID: 105_Eglin_zone1_CROWN\"\n",
        "> ",
        "",
        "> ",
        "metrics_all_percentil <- dplyr::bind_rows(metrics_precentile_list1)",
        "> ",
        "metrics_all_percentil$treeID <- factor(metrics_all_percentil$treeID)",
        "> ",
        "",
        "> ",
        "# Remove the row with all NA values from the original data frame",
        "> ",
        "# First remove \"treeID\" and \"treeID1\" columns",
        "> ",
        "no_treeID <- metrics_all_percentil[, -which(names(metrics_all_percentil) == c(\"treeID\",\"treeID1\"))]",
        "> ",
        "",
        "> ",
        "# Check if any row has all NA values",
        "> ",
        "NA_or_zero <- apply(no_treeID, 1, function(row) all(is.na(row) | row == 0))",
        "> ",
        "",
        "> ",
        "# Get the row index with all NA values",
        "> ",
        "row_index <- which(NA_or_zero)",
        "> ",
        "",
        "> ",
        "# Remove the row with all NA values from the original data frame",
        "> ",
        "if (length(row_index) > 0) {",
        "+ ",
        "    gap_cbh_metrics <- metrics_all_percentil[-row_index, ]",
        "+ ",
        "} else {",
        "+ ",
        "    gap_cbh_metrics <- metrics_all_percentil",
        "+ ",
        "}",
        "> ",
        "library(magrittr)",
        "> ",
        "library(dplyr)",
        "> ",
        "",
        "> ",
        "# LAD profiles derived from normalized ALS data after applying [lad.profile()] function",
        "> ",
        "data_path <- file.path(\"D:/OLGA/R_library/LadderFuelsR/extdata/LAD_profiles.txt\")",
        "> ",
        "LAD_profiles <- read.table(data_path, sep = \"\\t\", header = TRUE)",
        "> ",
        "LAD_profiles$treeID <- factor(LAD_profiles$treeID)",
        "> ",
        "",
        "> ",
        "trees_name1 <- as.character(LAD_profiles$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "percentile_list1<-list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)) {",
        "+ ",
        "    tree1 <- LAD_profiles |> dplyr::filter(treeID == i)",
        "+ ",
        "    percentiles <- calculate_gaps_perc2(tree1)",
        "+ ",
        "    percentile_list1[[i]] <- percentiles",
        "+ ",
        "}",
        "[1] \"treeID: 1_Eglin_zone1_CROWN\"\n[1] \"treeID: 10_Eglin_zone1_CROWN\"\n[1] \"treeID: 100_Eglin_zone1_CROWN\"\n[1] \"treeID: 101_Eglin_zone1_CROWN\"\n[1] \"treeID: 102_Eglin_zone1_CROWN\"\n[1] \"treeID: 103_Eglin_zone1_CROWN\"\n[1] \"treeID: 104_Eglin_zone1_CROWN\"\n[1] \"treeID: 105_Eglin_zone1_CROWN\"\n",
        "> ",
        "gaps_perc2 <- dplyr::bind_rows(percentile_list1)",
        "> ",
        "gaps_perc2$treeID <- factor(gaps_perc2$treeID)",
        "> ",
        "trees_name1 <- as.character(gaps_perc2$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "metrics_distance_list <- list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)) {",
        "+ ",
        "    ",
        "+ ",
        "    # Filter data for each tree",
        "+ ",
        "    tree1 <- gap_cbh_metrics |> dplyr::filter(treeID == i)",
        "+ ",
        "    tree2 <- gaps_perc2 |> dplyr::filter(treeID == i)",
        "+ ",
        "    # Get distance metrics for each tree",
        "+ ",
        "    metrics_distance <- get_distance(tree1, tree2)",
        "+ ",
        "    metrics_distance_list[[i]] <- metrics_distance",
        "+ ",
        "}",
        "There were 44 warnings (use warnings() to see them)",
        "\n",
        "> ",
        "",
        "> ",
        "# Combine the individual data frames",
        "> ",
        "distance_metrics <- dplyr::bind_rows(metrics_distance_list)",
        "> ",
        "metrics_depth_list <- list()",
        "> ",
        "",
        "> ",
        "for (i in levels(LAD_profiles$treeID)){",
        "+ ",
        "    ",
        "+ ",
        "    tree1 <- LAD_profiles |> dplyr::filter(treeID == i)",
        "+ ",
        "    tree2 <- distance_metrics |> dplyr::filter(treeID == i)",
        "+ ",
        "    ",
        "+ ",
        "    # Get depths for each tree",
        "+ ",
        "    metrics_depth <- get_depths(tree1, tree2)",
        "+ ",
        "    metrics_depth_list[[i]] <- metrics_depth",
        "+ ",
        "}",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "",
        "> ",
        "# Combine the individual data frames",
        "> ",
        "depth_metrics <- dplyr::bind_rows(metrics_depth_list)",
        "> ",
        "depth_metrics ",
        "           treeID1                treeID cbh1 gap1 gap2 cbh2 cbh3 cbh4 dist1 Hdist1 max_height Hdepth0 depth0 Hdepth1\nheight...1       1   1_Eglin_zone1_CROWN  1.5  2.5  5.5  6.5  9.5 14.5     4    5.5       15.5     1.5      1    14.5\nheight...2      10  10_Eglin_zone1_CROWN  5.5  1.5  4.5 10.5 13.5   NA     4    4.5       14.5     0.5      0     8.5\nheight...3     100 100_Eglin_zone1_CROWN  1.5  2.5  4.5  5.5  8.5 11.5     3    4.5       12.5     1.5      1    11.5\nheight...4     101 101_Eglin_zone1_CROWN",
        "  4.5  1.5  3.5  6.5 11.5   NA     3    3.5       12.5     0.5      0    11.5\nheight...5     102 102_Eglin_zone1_CROWN  5.5  1.5  4.5  8.5 11.5   NA     4    4.5       12.5     0.5      0    11.5\nheight...6     103 103_Eglin_zone1_CROWN  1.5  2.5  4.5  5.5  7.5 10.5     3    4.5       12.5     1.5      1    11.5\nheight...7     104 104_Eglin_zone1_CROWN  2.5  1.5  3.5  4.5  7.5  9.5     1    1.5       12.5     0.5      0     2.5\nheight...8     105 105_Eglin_zone1_CROWN  4.5  1.5  3.5  7.5 11.5   NA     3    3.5",
        "       12.5     0.5      0    11.5\n           depth1 gap3 dist2 Hdist2 Hdepth2 depth2 cbh5 dist3 Hdist3 Hdepth3 depth3\nheight...1      8   NA    NA     NA      NA     NA   NA    NA     NA      NA     NA\nheight...2      4  9.5     1    9.5    13.5      3   NA    NA     NA      NA     NA\nheight...3      6   NA    NA     NA      NA     NA   NA    NA     NA      NA     NA\nheight...4      7   NA    NA     NA      NA     NA   NA    NA     NA      NA     NA\nheight...5      6   NA    NA     NA      NA     NA   NA    NA",
        "     NA      NA     NA\nheight...6      6   NA    NA     NA      NA     NA 11.5    NA     NA      NA     NA\nheight...7      1  8.5     1    3.5     7.5      4 11.5     1    8.5    11.5      2\nheight...8      7   NA    NA     NA      NA     NA   NA    NA     NA      NA     NA\n",
        "> ",
        "trees_name1 <- as.character(depth_metrics$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "fbh_corr_list <- list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)){",
        "+ ",
        "    # Filter data for each tree",
        "+ ",
        "    tree3 <- depth_metrics |> dplyr::filter(treeID == i)",
        "+ ",
        "    # Get real fbh for each tree",
        "+ ",
        "    fbh_corr <- get_real_fbh(tree3)",
        "+ ",
        "    # Store fbh values in a list",
        "+ ",
        "    fbh_corr_list[[i]] <- fbh_corr",
        "+ ",
        "}",
        "[1] \"Unique treeIDs: 1_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 10_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 100_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 101_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 102_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 103_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 104_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 105_Eglin_zone1_CROWN\"\n",
        "> ",
        "",
        "> ",
        "# Combine fbh values for all trees",
        "> ",
        "effective_fbh <- dplyr::bind_rows(fbh_corr_list)",
        "> ",
        "effective_fbh$treeID <- factor(effective_fbh$treeID)",
        "> ",
        "effective_fbh",
        "                          treeID treeID1 dist1 Hdist1 max1 Hdepth1 depth1 Hdepth2 depth2 Hcbh1 Hcbh2 Hcbh3 Hcbh4 max_height\nheight...1   1_Eglin_zone1_CROWN       1     4    5.5 15.5     1.5      1    14.5      8   1.5   6.5   6.5   6.5       15.5\nheight...2  10_Eglin_zone1_CROWN      10     4    4.5 14.5     8.5      4    13.5      3   5.5   5.5   5.5    NA       14.5\nheight...3 100_Eglin_zone1_CROWN     100     3    4.5 12.5     1.5      1    11.5      6   1.5   5.5   5.5   5.5       12.5\nheight...4 101_Eglin_zone1_CROWN",
        "     101     3    3.5 12.5    11.5      7      NA     NA   4.5   4.5   4.5    NA       12.5\nheight...5 102_Eglin_zone1_CROWN     102     4    4.5 12.5    11.5      6      NA     NA   5.5   5.5   5.5    NA       12.5\nheight...6 103_Eglin_zone1_CROWN     103     3    4.5 12.5     1.5      1    11.5      6   1.5   5.5   5.5   5.5       12.5\nheight...7 104_Eglin_zone1_CROWN     104     1    1.5 12.5     2.5      1     7.5      4   2.5   2.5   2.5   2.5       12.5\nheight...8 105_Eglin_zone1_CROWN     105     3    3.5",
        " 12.5    11.5      7      NA     NA   4.5   4.5   4.5    NA       12.5\n           dist2 Hdist2 Hcbh5 dist3 Hdist3 Hdepth3 depth3\nheight...1    NA     NA    NA    NA     NA      NA     NA\nheight...2     1    9.5    NA    NA     NA      NA     NA\nheight...3    NA     NA    NA    NA     NA      NA     NA\nheight...4    NA     NA    NA    NA     NA      NA     NA\nheight...5    NA     NA    NA    NA     NA      NA     NA\nheight...6    NA     NA   5.5    NA     NA      NA     NA\nheight...7     1    3.5   2.5     1",
        "    8.5    11.5      2\nheight...8    NA     NA    NA    NA     NA      NA     NA\n",
        "> ",
        "effective_fbh$treeID <- factor(effective_fbh$treeID)",
        "> ",
        "",
        "> ",
        "trees_name1 <- as.character(effective_fbh$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "depth_metrics_corr_list <- list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)){",
        "+ ",
        "    # Filter data for each tree",
        "+ ",
        "    tree3 <- effective_fbh |> dplyr::filter(treeID == i)",
        "+ ",
        "    # Get real depths for each tree",
        "+ ",
        "    depth_metrics_corr <- get_real_depths(tree3)",
        "+ ",
        "    depth_metrics_corr_list[[i]] <- depth_metrics_corr",
        "+ ",
        "}",
        "[1] \"Unique treeIDs: 1_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 10_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 100_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 101_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 102_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 103_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 104_Eglin_zone1_CROWN\"\n[1] \"Unique treeIDs: 105_Eglin_zone1_CROWN\"\n",
        "Warning messages:\n",
        "1: Unknown or uninitialised column: `dptf`. \n",
        "2: Unknown or uninitialised column: `Hdepth1`. \n",
        "3: Unknown or uninitialised column: `dptf`. \n",
        "4: Unknown or uninitialised column: `Hdepth1`. \n",
        "5: Unknown or uninitialised column: `dptf`. \n",
        "6: Unknown or uninitialised column: `Hdepth1`. \n",
        "7: Unknown or uninitialised column: `dptf`. \n",
        "8: Unknown or uninitialised column: `Hdepth1`. \n",
        "9: Unknown or uninitialised column: `dptf`. \n",
        "10: Unknown or uninitialised column: `Hdepth1`. \n",
        "> ",
        "",
        "> ",
        "# Combine depth values for all trees",
        "> ",
        "effective_depth <- dplyr::bind_rows(depth_metrics_corr_list)",
        "> ",
        "effective_depth ",
        "           treeID1                treeID Hcbh1 Hcbh2 dptf1 dptf2 Hdptf1 Hdptf2 dist1 Hdist1 max_height\nheight...1       1   1_Eglin_zone1_CROWN   1.5   6.5     1     8    1.5   14.5     4    5.5       15.5\nheight...2      10  10_Eglin_zone1_CROWN   5.5    NA     8    NA   13.5     NA     4    4.5       14.5\nheight...3     100 100_Eglin_zone1_CROWN   1.5   5.5     1     6    1.5   11.5     3    4.5       12.5\nheight...4     101 101_Eglin_zone1_CROWN   4.5    NA     7    NA   11.5     NA     3    3.5       12.5",
        "\nheight...5     102 102_Eglin_zone1_CROWN   5.5    NA     6    NA   11.5     NA     4    4.5       12.5\nheight...6     103 103_Eglin_zone1_CROWN   1.5   5.5     1     6    1.5   11.5     3    4.5       12.5\nheight...7     104 104_Eglin_zone1_CROWN   2.5    NA     9    NA   11.5     NA     1    1.5       12.5\nheight...8     105 105_Eglin_zone1_CROWN   4.5    NA     7    NA   11.5     NA     3    3.5       12.5\n",
        "> ",
        "trees_name1 <- as.character(effective_depth$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "corr_distance_metrics_list <- list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)) {",
        "+ ",
        "    tree1 <- effective_depth |> dplyr::filter(treeID == i)",
        "+ ",
        "    corr_distance_metrics <- get_effective_gap(tree1)",
        "+ ",
        "    corr_distance_metrics_list[[i]] <- corr_distance_metrics",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Combine the individual data frames",
        "> ",
        "effective_distances <- dplyr::bind_rows(corr_distance_metrics_list)",
        "> ",
        "effective_distances ",
        "           treeID1                treeID dist1 dptf1 dptf2 effdist1 Hcbh1 Hcbh2 Hdist1 Hdptf1 Hdptf2 max1 max_Hcbh\nheight...1       1   1_Eglin_zone1_CROWN     4     1     8        4   1.5   6.5    5.5    1.5   14.5 15.5      6.5\nheight...2      10  10_Eglin_zone1_CROWN     4     8    NA        4   5.5    NA    4.5   13.5     NA 14.5      5.5\nheight...3     100 100_Eglin_zone1_CROWN     3     1     6        3   1.5   5.5    4.5    1.5   11.5 12.5      5.5\nheight...4     101 101_Eglin_zone1_CROWN     3     7",
        "    NA        3   4.5    NA    3.5   11.5     NA 12.5      4.5\nheight...5     102 102_Eglin_zone1_CROWN     4     6    NA        4   5.5    NA    4.5   11.5     NA 12.5      5.5\nheight...6     103 103_Eglin_zone1_CROWN     3     1     6        3   1.5   5.5    4.5    1.5   11.5 12.5      5.5\nheight...7     104 104_Eglin_zone1_CROWN     1     9    NA       NA   2.5    NA    1.5   11.5     NA 12.5      2.5\nheight...8     105 105_Eglin_zone1_CROWN     3     7    NA        3   4.5    NA    3.5   11.5     NA 12.5",
        "      4.5\n           max_Hdptf max_dptf max_Hdist max_effdist last_Hcbh last_Hdist last_dptf last_Hdptf last_effdist max_height\nheight...1      14.5        8       5.5           4       6.5        5.5         8       14.5            4       15.5\nheight...2      13.5        8       4.5           4       5.5        4.5         8       13.5            4       14.5\nheight...3      11.5        6       4.5           3       5.5        4.5         6       11.5            3       12.5\nheight...4      11.5        7       3.5",
        "           3       4.5        3.5         7       11.5            3       12.5\nheight...5      11.5        6       4.5           4       5.5        4.5         6       11.5            4       12.5\nheight...6      11.5        6       4.5           3       5.5        4.5         6       11.5            3       12.5\nheight...7      11.5        9        NA          NA       2.5         NA         9       11.5           NA       12.5\nheight...8      11.5        7       3.5           3       4.5        3.5         7",
        "       11.5            3       12.5\n",
        "> ",
        "trees_name1 <- as.character(effective_distances$treeID)",
        "> ",
        "trees_name2 <- factor(unique(trees_name1))",
        "> ",
        "",
        "> ",
        "cum_LAD_metrics_list <- list()",
        "> ",
        "",
        "> ",
        "for (i in levels(trees_name2)) {",
        "+ ",
        "    # Filter data for each tree",
        "+ ",
        "    tree1 <- LAD_profiles |> dplyr::filter(treeID == i)",
        "+ ",
        "    tree2 <- effective_distances |> dplyr::filter(treeID == i)",
        "+ ",
        "    ",
        "+ ",
        "    # Get cumulative LAD metrics for each tree",
        "+ ",
        "    cum_LAD_metrics <- get_cum_break(tree1, tree2)",
        "+ ",
        "    cum_LAD_metrics_list[[i]] <- cum_LAD_metrics",
        "+ ",
        "}",
        "[1] \"treeID: 1_Eglin_zone1_CROWN\"\n[1] \"treeID: \"\n",
        "An error occurred in row  with treeID '': 0 (non-NA) cases\n",
        "Error in `[.data.frame`(df_effective, c(\"treeID\", \"treeID1\")) : \n  undefined columns selected\n",
        "> ",
        "roxygen2::roxygenise()",
        "\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m Loading \u001B[34mLadderFuelsR\u001B[38;5;232m\u001B[39m\n\nRestarting R session...\n\n"
    ]
}