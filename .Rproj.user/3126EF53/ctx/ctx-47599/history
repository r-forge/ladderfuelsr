df6f <- df6f %>%
dplyr::rename(
treeID= treeID2,
treeID1 = treeID1)
max_height<-data.frame(df5b$max1)
names(max_height)<-"max_height"
if(!("max_height" %in% colnames(df6f))) {
df6f<-data.frame(df6f, max_height)
}
}
}
######################### THE HCBH AND HDIST CORRESPONDING TO THE MAXIMUM EFFECTIVE DISTANCE BY POSITION ################################
if(length(effdist_cols) > 0) {
# Extract unique prefixes
prefixes <- unique(gsub("([a-zA-Z]+).*", "\\1", names(df6a)))
# Rename the columns based on the extracted prefixes
for (prefix in prefixes) {
# Identify columns with the current prefix
cols <- grep(paste0("^", prefix), names(df6a))
# Generate new column names with consecutive suffixes
new_names <- paste0(prefix, 1:length(cols))
# Assign new names to the columns
names(df6a)[cols] <- new_names
}
#########################################
effdist_cols <- sort(grep("^effdist", names(df6a), value = TRUE))
effdist_vals <- df6a[1, effdist_cols, drop = FALSE]
if(length(effdist_cols) > 0 && any(df6a[, effdist_cols] > 1)) {
# First, select the 'effdist' columns
effdist_cols <- names(df6a)[str_detect(names(df6a), "^effdist")]
# Extract effdist values from the first row
effdist_values <- df6a[1, grep("effdist", names(df6a))]
# Find the index of the column with max effdist
max_effdist_col_index <- tail(which(effdist_values == max(effdist_values)), n=1)
# Define the column names for Hcbh, Hdist, dptf, and Hdptf
hcbh_cols <- sort(names(df6a)[grep("Hcbh", names(df6a))])
hdist_cols <- sort(names(df6a)[grep("Hdist", names(df6a))])
dptf_cols <- sort(names(df6a)[grep("^dptf", names(df6a))])
hdptf_cols <- sort(names(df6a)[grep("^Hdptf", names(df6a))])
if (df6a$effdist1 == 1 && all(sapply(df6a[effdist_cols], function(x) x[1] == df6a$effdist1[1]))) {
max_df <- df6a %>%
rename_with(~ ifelse(. %in% c("Hcbh1", "dptf1", "Hdist1", "Hdptf1", "effdist1"), paste0("max_", str_remove(., "\\d+$")), .))
}
if (df6a$effdist1[1] == 1 & all(df6a[effdist_cols][-1] != df6a$effdist1[1])) {
df6a$effdist1 <-NULL
}
#### rename ##############3
prefixes <- unique(gsub("([a-zA-Z]+).*", "\\1", names(df6a)))
# Rename the columns based on the extracted prefixes
for (prefix in prefixes) {
# Identify columns with the current prefix
cols <- grep(paste0("^", prefix), names(df6a))
# Generate new column names with consecutive suffixes
new_names <- paste0(prefix, 1:length(cols))
# Assign new names to the columns
names(df6a)[cols] <- new_names
}
effdist_cols <- sort(grep("^effdist", names(df6a), value = TRUE))
effdist_vals <- df6a[1, effdist_cols, drop = FALSE]
hcbh_cols <- sort(names(df6a)[grep("Hcbh", names(df6a))])
hdist_cols <- sort(names(df6a)[grep("Hdist", names(df6a))])
dptf_cols <- sort(names(df6a)[grep("^dptf", names(df6a))])
hdptf_cols <- sort(names(df6a)[grep("^Hdptf", names(df6a))])
#####################################################3
if (length(effdist_cols) == 1 & df6a[[hcbh_cols[1]]][1] == 1.5 & length(hdist_cols) > 1) {
# Create a new dataframe with the required columns
df6ab <- df6a[,c( hcbh_cols[2], hdist_cols[2], dptf_cols[2], hdptf_cols[2], effdist_cols[1])]
# Rename columns with prefix "max_" and remove suffix
max_df <- df6ab %>% rename_with(.fn = ~ paste0("max_", str_remove(., "\\d+$")))
}
if (length(effdist_cols) > 1 & df6a[[hcbh_cols[1]]][1] == 1.5 && length(hdist_cols) >= 1 && !exists("max_df")) {
suffix <- max_effdist_col_index
suffix1 <- as.character(as.numeric(suffix) +1)
#suffix2 <- as.character(as.numeric(suffix) +2)
# Get the suffixes of the columns
hcbh_suffixes <- str_extract(hcbh_cols, "\\d+$")
hdist_suffixes <- str_extract(hdist_cols, "\\d+$")
dptf_suffixes <- str_extract(dptf_cols, "\\d+$")
hdptf_suffixes <- str_extract(hdptf_cols, "\\d+$")
effdist_suffixes <- str_extract(effdist_cols, "\\d+$")
# Get the columns whose suffixes are greater or equal to the max effdist suffix
hcbh_col <- hcbh_cols[which.max(as.numeric(hcbh_suffixes) >= as.numeric(suffix1))]
hdist_col <- hdist_cols[which.max(as.numeric(hdist_suffixes) >= as.numeric(suffix))]
dptf_col <- dptf_cols[which.max(as.numeric(dptf_suffixes) >= as.numeric(suffix1))]
hdptf_col <- hdptf_cols[which.max(as.numeric(hdptf_suffixes) >= as.numeric(suffix1))]
effdist_col <- effdist_cols[which.max(as.numeric(effdist_suffixes) >= as.numeric(suffix))]
# Create a new dataframe with the required columns
df6ab <- df6a[,c(hcbh_col, hdist_col, dptf_col, hdptf_col,effdist_col)]
# Rename columns with prefix "max_" and remove suffix
max_df <- df6ab %>% rename_with(.fn = ~ paste0("max_", str_remove(., "\\d+$")))
}
if (length(effdist_cols) > 1 & df6a[[hcbh_cols[1]]][1] > 1.5 && length(hdist_cols) >= 1 && df6a[[dist_cols[1]]][1] > 1 && !exists("max_df")) {
suffix <- max_effdist_col_index
#suffix2 <- as.character(as.numeric(suffix) +2)
# Get the suffixes of the columns
hcbh_suffixes <- str_extract(hcbh_cols, "\\d+$")
hdist_suffixes <- str_extract(hdist_cols, "\\d+$")
dptf_suffixes <- str_extract(dptf_cols, "\\d+$")
hdptf_suffixes <- str_extract(hdptf_cols, "\\d+$")
effdist_suffixes <- str_extract(effdist_cols, "\\d+$")
# Get the columns whose suffixes are greater or equal to the max effdist suffix
hcbh_col <- hcbh_cols[which.max(as.numeric(hcbh_suffixes) >= as.numeric(suffix))]
hdist_col <- hdist_cols[which.max(as.numeric(hdist_suffixes) >= as.numeric(suffix))]
dptf_col <- dptf_cols[which.max(as.numeric(dptf_suffixes) >= as.numeric(suffix))]
hdptf_col <- hdptf_cols[which.max(as.numeric(hdptf_suffixes) >= as.numeric(suffix))]
effdist_col <- effdist_cols[which.max(as.numeric(effdist_suffixes) >= as.numeric(suffix))]
# Create a new dataframe with the required columns
df6ab <- df6a[,c(hcbh_col, hdist_col, dptf_col, hdptf_col,effdist_col)]
# Rename columns with prefix "max_" and remove suffix
max_df <- df6ab %>% rename_with(.fn = ~ paste0("max_", str_remove(., "\\d+$")))
}
if (length(effdist_cols) > 1 & df6a[[hcbh_cols[1]]][1] > 1.5 && length(hdist_cols) >= 1 && df6a[[dist_cols[1]]][1] == 1 && !exists("max_df")) {
suffix <- max_effdist_col_index
suffix2 <- as.character(as.numeric(suffix) +1)
# Get the suffixes of the columns
hcbh_suffixes <- str_extract(hcbh_cols, "\\d+$")
hdist_suffixes <- str_extract(hdist_cols, "\\d+$")
dptf_suffixes <- str_extract(dptf_cols, "\\d+$")
hdptf_suffixes <- str_extract(hdptf_cols, "\\d+$")
effdist_suffixes <- str_extract(effdist_cols, "\\d+$")
# Get the columns whose suffixes are greater or equal to the max effdist suffix
hcbh_col <- hcbh_cols[which.max(as.numeric(hcbh_suffixes) >= as.numeric(suffix2))]
hdist_col <- hdist_cols[which.max(as.numeric(hdist_suffixes) >= as.numeric(suffix2))]
dptf_col <- dptf_cols[which.max(as.numeric(dptf_suffixes) >= as.numeric(suffix2))]
hdptf_col <- hdptf_cols[which.max(as.numeric(hdptf_suffixes) >= as.numeric(suffix2))]
effdist_col <- effdist_cols[which.max(as.numeric(effdist_suffixes) >= as.numeric(suffix))]
# Create a new dataframe with the required columns
df6ab <- df6a[,c(hcbh_col, hdist_col, dptf_col, hdptf_col,effdist_col)]
# Rename columns with prefix "max_" and remove suffix
max_df <- df6ab %>% rename_with(.fn = ~ paste0("max_", str_remove(., "\\d+$")))
}
}
effdist_cols <- sort(grep("^effdist", names(df6a), value = TRUE))
effdist_vals <- df6a[1, effdist_cols, drop = FALSE]
if(length(effdist_cols) == 1 | all(df6a[, effdist_cols] %in% c(0, 1)) && !exists("max_df")) { ### max-last Hdist
# Define the column names for Hcbh, Hdist, dptf, and Hdptf
hcbh_cols <- grep("^Hcbh", names(df6a), value=TRUE)
last_hcbh_col <- hcbh_cols[length(hcbh_cols)]
hdist_cols <- grep("^Hdist", names(df6a), value=TRUE)
last_hdist_col <- hdist_cols[length(hdist_cols)]
dptf_cols <- grep("^dptf", names(df6a), value=TRUE)
last_dptf_col <- dptf_cols[length(dptf_cols)]
hdptf_cols <- grep("^Hdptf", names(df6a), value=TRUE)
last_hdptf_col <- hdptf_cols[length(hdptf_cols)]
effdist_cols <- grep("^effdist", names(df6a), value=TRUE)
last_effdist_col <- effdist_cols[length(effdist_cols)]
max_df <- df6a %>%
dplyr::select(max_Hcbh = {{last_hcbh_col}},
max_Hdptf = {{last_hdptf_col}},
max_dptf = {{last_dptf_col}},
max_Hdist = {{last_hdist_col}},
max_effdist = {{last_effdist_col}})
}
##############################################################
####### the last Hcbh with numeric values ####################
######################################
# Identify columns which only have zeros
#cols_to_remove <- sapply(df6a, function(col) all(col == 0))
# Replace NA values with FALSE in cols_to_remove
#cols_to_remove[is.na(cols_to_remove)] <- FALSE
# Remove those columns
#df6a <- df6a[, !cols_to_remove]
effdist_cols <- names(df6a)[str_detect(names(df6a), "^effdist")]
effdist_values <- df6a[1, grep("effdist", names(df6a))]
if(length(effdist_cols) > 0 && any(df6a[, effdist_cols] > 1)) {
# Get the column names that start with "Hcbh" followed by a number
hcbh_cols <- grep("^Hcbh[0-9]+$", names(df6a), value = TRUE)
# Initialize an empty vector to store the column indices
hcbh_cols_numeric <- numeric()
# Iterate through each of the "Hcbh" columns
for(col in hcbh_cols){
# Check if the column contains only numeric values
if(all(sapply(df6a[[col]], is.numeric))){
# If it does, add its index to the vector
hcbh_cols_numeric <- c(hcbh_cols_numeric, which(names(df6a) == col))
}
}
# The last "Hcbh" column with numeric values will be:
last_Hcbh_numeric_col <- names(df6a)[max(hcbh_cols_numeric)]
last_Hcbh_numeric_val<-df6a[[last_Hcbh_numeric_col]]
# Extract the suffix from the last_Hcbh_numeric_col
suffix <- gsub("Hcbh", "", last_Hcbh_numeric_col)
# Form the corresponding "Hdist" and "Hdepth" column names
last_Hdist_col <- paste0("Hdist", suffix)
last_Hdepth_col <- paste0("Hdptf", suffix)
last_dptf_col <- paste0("dptf", suffix)
last_effdist_col <- paste0("effdist", suffix)
suffix1 <- as.numeric(str_extract(last_effdist_col, "\\d+$"))
# Assuming 'suffix' and 'last_effdist_col' have been defined before this code block
last_effdist_col1 <- NULL
# If last_effdist_col doesn't exist in the dataframe
if (!(last_effdist_col %in% names(df6a)) && !(last_Hdist_col %in% names(df6a)) && suffix > 0) {
suffix2 <- suffix1 - 1
last_effdist_col1 <- paste0("effdist", suffix2)
last_Hdist_col1 <- paste0("Hdist", suffix2)
#print(paste("Trying column:", last_effdist_col1)) # Diagnostic print
}
if (!is.null(last_effdist_col1)) {
previous_effdist <- last_effdist_col1
}
# Check the first condition
effdist_columns <- grep("^effdist", names(df6a), value = TRUE)
if (length(effdist_columns) == 1) {
last_effdist_col1 <- effdist_columns[1]
last_effdist1 <- df6a[[last_effdist_col1]]
hcbh_cols <- sort(names(df6a)[grep("Hcbh", names(df6a))])
hdist_cols <- sort(names(df6a)[grep("Hdist", names(df6a))])
dptf_cols <- sort(names(df6a)[grep("^dptf", names(df6a))])
hdptf_cols <- sort(names(df6a)[grep("^Hdptf", names(df6a))])
# Extract the suffix from the last_Hcbh_numeric_col
suffix <- gsub("Hcbh", "", last(hcbh_cols))
# Form the corresponding "Hdist" and "Hdepth" column names
last_Hdist_col <- paste0("Hdist", suffix)
last_Hdepth_col <- paste0("Hdptf", suffix)
last_dptf_col <- paste0("dptf", suffix)
last_effdist_col <- paste0("effdist", suffix)
last_Hcbh_col <- paste0("Hcbh", suffix)
if (last_Hdepth_col %in% colnames(df6a) & last_Hdist_col %in% colnames(df6a)) {
last_df <- data.frame(
last_Hcbh = df6a[[last_Hcbh_col]],
last_Hdist = df6a[[last_Hdist_col]],
last_dptf = df6a[[last_dptf_col]],
last_Hdptf = df6a[[last_Hdepth_col]],  # Again change to last_Hdptf
last_effdist = df6a[[last_effdist_col1]])
names(last_df) <-  c("last_Hcbh", "last_Hdist","last_dptf","last_Hdptf","last_effdist")  # And update here
}
if (!last_Hdist_col %in% colnames(df6a)) {
last_df <- data.frame(
last_Hcbh = df6a[[last_Hcbh_col]],
last_Hdist = df6a$Hdist1,
last_dptf = df6a[[last_dptf_col]],
last_Hdptf = df6a[[last_Hdepth_col]],  # Again change to last_Hdptf
last_effdist = df6a[[last_effdist_col1]])
names(last_df) <-  c("last_Hcbh", "last_Hdist","last_dptf","last_Hdptf","last_effdist")  # And update here
}
Hdptf1<- "Hdptf1"
if (!last_Hdepth_col %in% colnames (df6a) && "Hdptf1" %in% colnames (df6a)) {
last_df <- data.frame(
last_Hcbh = df6a[[last_Hcbh_numeric_col]],
last_Hdist = df6a[[last_Hdist_col]],
last_Hdptf = df6a[[Hdptf1]],  # Change this to last_Hdptf to match the actual column name
last_effdist = last_effdist1
)
names(last_df) <- c("last_Hcbh", "last_Hdist","last_Hdptf", "last_effdist")  # And update here accordingly
}
}
if(length(effdist) > 0 && !exists("last_df")) {
# First, select the 'effdist' columns
effdist_cols <- names(df6a)[str_detect(names(df6a), "^effdist")]
# Extract effdist values from the first row
effdist_values <- df6a[1, grep("effdist", names(df6a))]
# Find the index of the column with last effdist
last_effdist_col_index <- tail(which(effdist_values == last(effdist_values)), n=1)
# Define the column names for Hcbh, Hdist, dptf, and Hdptf
hcbh_cols <- sort(names(df6a)[grep("Hcbh", names(df6a))])
hdist_cols <- sort(names(df6a)[grep("Hdist", names(df6a))])
dptf_cols <- sort(names(df6a)[grep("^dptf", names(df6a))])
hdptf_cols <- sort(names(df6a)[grep("^Hdptf", names(df6a))])
if (df6a$effdist1 == 1 && all(sapply(df6a[effdist_cols], function(x) x[1] == df6a$effdist1[1]))) {
last_df <- df6a %>%
rename_with(~ ifelse(. %in% c("Hcbh", "dptf", "Hdist", "Hdptf", "effdist"), paste0("last_", str_remove(., "\\d+$")), .))
}
if (length(effdist_cols) == 1 & df6a[[hcbh_cols[1]]][1] == 1.5 && length(hdist_cols) >= 1) {
# Create a new dataframe with the required columns
last1 <- df6a[,c( hcbh_cols[2], hdist_cols[2], dptf_cols[2], hdptf_cols[2], effdist_cols [1])]
# Rename columns with prefix "last_" and remove suffix
last_df <- last1 %>% rename_with(.fn = ~ paste0("last_", str_remove(., "\\d+$")))
}
if (length(effdist_cols) > 1 & df6a[[hcbh_cols[1]]][1] == 1.5 && length(hdist_cols) >= 1) {
suffix <- last_effdist_col_index
suffix1 <- as.character(as.numeric(suffix) +1)
#suffix2 <- as.character(as.numeric(suffix) +2)
# Get the suffixes of the columns
hcbh_suffixes <- as.numeric(gsub("Hcbh", "", hcbh_cols))
hdist_suffixes <- as.numeric(gsub("Hdist", "", hdist_cols))
dptf_suffixes <- as.numeric(gsub("dptf", "", dptf_cols))
hdptf_suffixes <- as.numeric(gsub("Hdptf", "", hdptf_cols))
effdist_suffixes <- as.numeric(gsub("effdist", "", effdist_cols))
# Get the columns whose suffixes are greater or equal to the last effdist suffix
hcbh_col_p <- hcbh_suffixes >= as.numeric(suffix1)
hdist_col_p <- hdist_suffixes >= as.numeric(suffix)
dptf_col_p <- dptf_suffixes >= as.numeric(suffix1)
hdptf_col_p <- hdptf_suffixes >= as.numeric(suffix1)
effdist_col_p <- effdist_suffixes >= as.numeric(suffix)
hcbh_col <- hcbh_cols[hcbh_col_p]
hdist_col<- last(hdist_cols[hdist_col_p])
dptf_col<- dptf_cols[dptf_col_p]
hdptf_col<- hdptf_cols[hdptf_col_p]
effdist_col<- effdist_cols[effdist_col_p]
# Check if hcbh_col, dptf_col, hdptf_col exist in df6a
if (length(hcbh_col) == 0 | length(dptf_col) == 0 | length(hdptf_col) == 0) {
hcbh_col <- last(hcbh_cols)
dptf_col <- last(dptf_cols)
hdptf_col <- last(hdptf_cols)
hdist_col <- last(hdist_col)
}
# Create a new dataframe with the required columns
last1 <- df6a[, c(hcbh_col, hdist_col, dptf_col, hdptf_col, effdist_col)]
# Rename columns with prefix "last_" and remove suffix
last_df <- last1 %>% rename_with(.fn = ~ paste0("last_", str_remove(., "\\d+$")))
}
if (length(effdist_cols) > 1 & df6a[[hcbh_cols[1]]][1] > 1.5 && length(hdist_cols) >= 1) {
# Define the column names for Hcbh, Hdist, dptf, and Hdptf
hcbh_cols <- sort(names(df6a)[grep("Hcbh", names(df6a))])
hdist_cols <- sort(names(df6a)[grep("Hdist", names(df6a))])
dptf_cols <- sort(names(df6a)[grep("^dptf", names(df6a))])
hdptf_cols <- sort(names(df6a)[grep("^Hdptf", names(df6a))])
effdist_cols <- names(df6a)[str_detect(names(df6a), "^effdist")]
effdist_values <- df6a[1, grep("effdist", names(df6a))]
last_effdist_col_index <- tail(which(effdist_values == last(effdist_values)), n=1)
suffix <- last_effdist_col_index
#suffix2 <- as.character(as.numeric(suffix) +2)
# Get the suffixes of the columns
hcbh_suffixes <- as.numeric(gsub("Hcbh", "", hcbh_cols))
hdist_suffixes <- as.numeric(gsub("Hdist", "", hdist_cols))
dptf_suffixes <- as.numeric(gsub("dptf", "", dptf_cols))
hdptf_suffixes <- as.numeric(gsub("Hdptf", "", hdptf_cols))
effdist_suffixes <- as.numeric(gsub("effdist", "", effdist_cols))
# Get the columns whose suffixes are greater or equal to the last effdist suffix
hcbh_col_p <- hcbh_suffixes >= as.numeric(suffix)
dptf_col_p <- dptf_suffixes >= as.numeric(suffix)
hdptf_col_p <- hdptf_suffixes >= as.numeric(suffix)
hdist_col_p <- hdist_suffixes >= as.numeric(suffix)
effdist_col_p <- effdist_suffixes >= as.numeric(suffix)
hcbh_col <- last(hcbh_cols[hcbh_col_p])
hdist_col<- last(hdist_cols[hdist_col_p])
dptf_col<- last(dptf_cols[dptf_col_p])
hdptf_col<- last(hdptf_cols[hdptf_col_p])
effdist_col<- effdist_cols[effdist_col_p]
# Create a new dataframe with the required columns
last1 <- df6a[,c(hcbh_col, hdist_col, dptf_col, hdptf_col,effdist_col)]
# Rename columns with prefix "last_" and remove suffix
last_df <- last1 %>% rename_with(.fn = ~ paste0("last_", str_remove(., "\\d+$")))
if(!hcbh_col %in% colnames(df6a) && !dptf_col %in% colnames(df6a) && !hdptf_col %in% colnames(df6a) ) {
hcbh_col <- last (hcbh_cols)
dptf_col<- last (dptf_cols)
hdptf_col<- last (hdptf_cols)
# Create a new dataframe with the required columns
last1 <- df6a[,c(hcbh_col, dptf_col, hdptf_col)]
# Rename columns with prefix "last_" and remove suffix
last_df <- last1 %>% rename_with(.fn = ~ paste0("last_", str_remove(., "\\d+$")))
}
} }
effdist_cols <- names(df6a)[str_detect(names(df6a), "^effdist")]
if(length(effdist_cols) == 0 | all(df6a[, effdist_cols] %in% c(0, 1)) && !exists("last_df") ) { ### max-last Hdist
# Define the column names for Hcbh, Hdist, dptf, and Hdptf
hcbh_cols <- grep("^Hcbh", names(df6a), value=TRUE)
last_hcbh_col <- hcbh_cols[length(hcbh_cols)]
hdist_cols <- grep("^Hdist", names(df6a), value=TRUE)
last_hdist_col <- hdist_cols[length(hdist_cols)]
dptf_cols <- grep("^dptf", names(df6a), value=TRUE)
last_dptf_col <- dptf_cols[length(dptf_cols)]
hdptf_cols <- grep("^Hdptf", names(df6a), value=TRUE)
last_hdptf_col <- hdptf_cols[length(hdptf_cols)]
effdist_cols <- grep("^effdist", names(df6a), value=TRUE)
last_effdist_col <- effdist_cols[length(effdist_cols)]
last_df <- df6a %>%
dplyr::select(last_Hcbh = {{last_hcbh_col}},
last_Hdptf = {{last_hdptf_col}},
last_dptf = {{last_dptf_col}},
last_Hdist = {{last_hdist_col}},
last_effdist = {{last_effdist_col}}
)
}
}
df6f<-data.frame(df6a, max_df, last_df)
###################  rename columns
# Exclude columns with prefixes: last_, max_, treeID
cols_to_exclude <- grep("^(last_|max_|treeID)", names(df6f), value = TRUE)
excluded_data <- df6f[, cols_to_exclude] # Store the excluded columns
df6f <- df6f[ , !(names(df6f) %in% cols_to_exclude)]
# Extract unique prefixes
prefixes <- unique(gsub("([a-zA-Z]+).*", "\\1", names(df6f)))
# Rename the columns based on the extracted prefixes
for (prefix in prefixes) {
# Identify columns with the current prefix
cols <- grep(paste0("^", prefix), names(df6f))
# Generate new column names with consecutive suffixes
new_names <- paste0(prefix, 1:length(cols))
# Assign new names to the columns
names(df6f)[cols] <- new_names
}
df6f <- cbind(df6f, excluded_data)
###################
# Find duplicated column names
dup_columns <- names(df6f)[duplicated(names(df6f)) | duplicated(names(df6f), fromLast = TRUE)]
# Keep one and remove the duplicates
for (col in dup_columns) {
columns_to_check <- which(names(df6f) == col)
# Assuming columns with same name have the same values, then
# keep the first column and remove the rest.
df6f <- df6f[-columns_to_check[-1]]
}
# Adjust the regex to only match effdist columns with a numeric suffix
if (df6f$Hcbh1[1] == 1.5 && sum(grepl("effdist[0-9]+$", colnames(df6f))) >= sum(grepl("Hcbh[0-9]+$", colnames(df6f)))) {
# Find the last 'effdist' column with numeric suffix
last_effdist_col <- tail(grep("effdist[0-9]+$", colnames(df6f)), 1)
# Drop the column
df6f <- df6f[,-last_effdist_col]
}
if(df6f$effdist1 == 1 || df6f$effdist1 == 0 && df6f$Hdptf1 == 0.5) {
df6f$Hdepth1<-NULL
}
}
#########################################
max_height<-data.frame(df5b$max1)
names(max_height)<-"max_height"
if(!("max_height" %in% colnames(df6f))) {
df6f<-data.frame(df6f, max_height)
}
cols_to_exclude <- grep("treeID|treeID1)", names(df6f), value = TRUE)
trees<-df6f[ , (names(df6f) %in% cols_to_exclude)]
df6f <- df6f[ , !(names(df6f) %in% cols_to_exclude)]
df6f <- data.frame (trees,df6f)
if("treeID2" %in% colnames (df6f)){
df6f <- df6f %>%
dplyr::rename(
treeID= treeID2,
treeID1 = treeID1)
}
effective_distances<-df6f
# Remove list attributes from columns
effective_distances[] <- lapply(effective_distances, function(x) {
if (is.list(attributes(x)))
attributes(x) <- attributes(x)[!names(attributes(x)) %in% c("dimnames")]
return(x)
})
# Loop through each column
for (col in names(effective_distances)) {
# Convert each column to a vector
effective_distances[[col]] <- unlist(effective_distances[[col]])
}
# Identify columns with matrix-like structure
matrix_columns <- sapply(effective_distances, function(x) is.matrix(x) && nrow(x) > 1)
# Extract the numeric values from matrix columns
effective_distances[matrix_columns] <- lapply(effective_distances[matrix_columns], function(x) as.numeric(x[, 1]))
# Convert data frame to remove list attributes
effective_distances <- data.frame(effective_distances)
# Get the columns that start with "treeID"
treeID_columns <- grep("^treeID", names(effective_distances), value = TRUE)
# Convert all variables to numeric except "treeID" columns
effective_distances[, !names(effective_distances) %in% treeID_columns] <-
lapply(effective_distances[, !names(effective_distances) %in% treeID_columns], as.numeric)
return(effective_distances)
}
library(dplyr)
library(magrittr)
library(stringr)
# Tree metrics derived from get_real_depths() function
effective_depth$treeID <- factor(effective_depth$treeID)
trees_name1 <- as.character(effective_depth$treeID)
trees_name2 <- factor(unique(trees_name1))
corr_distance_metrics_list <- list()
for (i in levels(trees_name2)) {
tree1 <- effective_depth |> dplyr::filter(treeID == i)
corr_distance_metrics <- get_effective_gap(tree1)
corr_distance_metrics_list[[i]] <- corr_distance_metrics
}
# Combine the individual data frames
effective_distances <- dplyr::bind_rows(corr_distance_metrics_list)
effective_distances
str(effective_distances )
library(magrittr)
library(segmented)
library(gdata)
# LAD profiles derived from normalized ALS data after applying [lad.profile()] function
LAD_profiles$treeID <- factor(LAD_profiles$treeID)
# Tree metrics derived from get_effective_gap() function
effective_distances$treeID <- factor(effective_distances$treeID)
trees_name1 <- as.character(effective_distances$treeID)
trees_name2 <- factor(unique(trees_name1))
cum_LAD_metrics_list <- list()
for (i in levels(trees_name2)) {
# Filter data for each tree
tree1 <- LAD_profiles |> dplyr::filter(treeID == i)
tree2 <- effective_distances |> dplyr::filter(treeID == i)
# Get cumulative LAD metrics for each tree
cum_LAD_metrics <- get_cum_break(tree1, tree2)
cum_LAD_metrics_list[[i]] <- cum_LAD_metrics
}
# Combine the individual data frames
cummulative_LAD <- dplyr::bind_rows(cum_LAD_metrics_list)
cummulative_LAD
roxygen2::roxygenise()
library(LadderFuelsR)
devtools::document()
rm(list = c("get_effective_gap"))
sessionInfo()
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
roxygen2::roxygenise()
library(LadderFuelsR)
