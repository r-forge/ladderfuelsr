depth1 = 1,
depth2 = 8,
dist1 = 4,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdepth1 = 1.5,
Hdepth2 = 14.5,
Hdist1 = 5.5,
max2 = 15.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
output
expected_output
test_data <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1"),
Hdepth1 = 1.5,
depth1 = 1,
dist1 = 4,
Hdist1 = 5.5,
Hdepth2 = 14.5,
depth2 = 8,
max1 = 15.5,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hcbh3 = 6.5,
Hcbh4 = 6.5,
max_height=15.5
)
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1_Eglin_zone1_CROWN"),
treeID = factor("1", levels = "1"),
depth1 = 1,
depth2 = 8,
dist1 = 4,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdepth1 = 1.5,
Hdepth2 = 14.5,
Hdist1 = 5.5,
max2 = 15.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
test_data <- read.table(system.file("extdata", "LAD_profiles.txt", package = "LadderFuelsR"), header = TRUE)
test_data$treeID <- factor(test_data$treeID)
trees_name1 <- as.character(test_data$treeID)
trees_name2 <- factor(unique(trees_name1))
test_data <- test_data |> dplyr::filter(treeID == "1_Eglin_zone1_CROWN")
test_data1 <- data.frame(
treeID1 = factor("1_Eglin_zone1_CROWN"),
treeID = factor("1", levels = "1"),
depth1 = 1,
depth2 = 8,
dist1 = 4,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdepth1 = 1.5,
Hdepth2 = 14.5,
Hdist1 = 5.5,
max2 = 15.5,
max_height = 15.5
)
output <- suppressWarnings(get_layers_lad(test_data, test_data1, threshold=10))
test_data <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1"),
Hdepth1 = 1.5,
depth1 = 1,
dist1 = 4,
Hdist1 = 5.5,
Hdepth2 = 14.5,
depth2 = 8,
max1 = 15.5,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hcbh3 = 6.5,
Hcbh4 = 6.5,
max_height=15.5
)
output <- get_effective_gap(test_data)
output
test_data <- read.table(system.file("extdata", "LAD_profiles.txt", package = "LadderFuelsR"), header = TRUE)
test_data$treeID <- factor(test_data$treeID)
trees_name1 <- as.character(test_data$treeID)
trees_name2 <- factor(unique(trees_name1))
test_data <- test_data |> dplyr::filter(treeID == "1_Eglin_zone1_CROWN")
test_data
test_data1 <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1", levels = "1"),
depth1 = 1,
depth2 = 8,
dist1 = 4,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdepth1 = 1.5,
Hdepth2 = 14.5,
Hdist1 = 5.5,
max2 = 15.5,
max_height = 15.5
)
output <- suppressWarnings(get_layers_lad(test_data, test_data1, threshold=10))
test_data1
get_layers_lad(test_data, test_data1, threshold=10)
test_data <- read.table(system.file("extdata", "LAD_profiles.txt", package = "LadderFuelsR"), header = TRUE)
test_data$treeID <- factor(test_data$treeID)
trees_name1 <- as.character(test_data$treeID)
trees_name2 <- factor(unique(trees_name1))
test_data <- test_data |> dplyr::filter(treeID == "1_Eglin_zone1_CROWN")
test_data1 <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
dist1 = 4,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
output <- suppressWarnings(get_layers_lad(test_data, test_data1, threshold=10))
output
test_data <- read.table(system.file("extdata", "LAD_profiles.txt", package = "LadderFuelsR"), header = TRUE)
test_data$treeID <- factor(test_data$treeID)
trees_name1 <- as.character(test_data$treeID)
trees_name2 <- factor(unique(trees_name1))
test_data <- test_data |> dplyr::filter(treeID == "1_Eglin_zone1_CROWN")
test_data1 <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
dist1 = 4,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
output <- suppressWarnings(get_layers_lad(test_data, test_data1, threshold=10))
# Define the expected output for df1
expected_df1 <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1"),
dist1 = 4,
dptf1 = 1,
Hcbh1 = 1.5,
Hdptf1 = 1.5,
max1 = 15.5,
Hdist1 = 0.5,
effdist1 = 0,
effdist2 = 4,
dptf2 = 8,
Hcbh2 = 6.5,
Hdist2 = 5.5,
Hdptf2 = 14.5,
Hcbh1_Hdptf1 = 1.347012, # Adjusted to match precision
Hcbh2_Hdptf2 = 98.65299, # Adjusted to match precision
max_height = 15.5,
nlayers = 2
)
# Define the expected output for df2
expected_df2 <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1"),
Hcbh1 = 6.5,
Hdist1 = 5.5,
dptf1 = 8,
Hdptf1 = 14.5,
Hcbh1_Hdptf1 = 98.65299, # Adjusted to match precision
effdist1 = 5,
max_height = 15.5,
nlayers = 1
)
# Reset row names of actual data frame
rownames(output$df1) <- seq_len(nrow(expected_df1))
# Write the test for df1
test_that("get_layers_lad returns expected output with test data for df1", {
expect_equal(output$df1, expected_df1, tolerance = 1e-6)
})
rownames(output$df2) <- seq_len(nrow(expected_df2))
test_that("get_layers_lad returns expected output with test data for df2", {
expect_equal(output$df2, expected_df2, tolerance = 1e-6) # Adjust tolerance as needed
})
test_data <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1"),
Hdepth1 = 1.5,
depth1 = 1,
dist1 = 4,
Hdist1 = 5.5,
Hdepth2 = 14.5,
depth2 = 8,
max1 = 15.5,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hcbh3 = 6.5,
Hcbh4 = 6.5,
max_height=15.5
)
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1_Eglin_zone1_CROWN"),
treeID = factor("1", levels = "1"),
depth1 = 1,
depth2 = 8,
dist1 = 4,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdepth1 = 1.5,
Hdepth2 = 14.5,
Hdist1 = 5.5,
max2 = 15.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
expected_output
output
test_data <- data.frame(
treeID = factor("1_Eglin_zone1_CROWN"),
treeID1 = factor("1"),
Hdepth1 = 1.5,
depth1 = 1,
dist1 = 4,
Hdist1 = 5.5,
Hdepth2 = 14.5,
depth2 = 8,
max1 = 15.5,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hcbh3 = 6.5,
Hcbh4 = 6.5,
max_height=15.5
)
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1_Eglin_zone1_CROWN"),
treeID = factor("1", levels = "1"),
depth1 = 1,
depth2 = 8,
dist1 = 4,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdepth1 = 1.5,
Hdepth2 = 14.5,
Hdist1 = 5.5,
max2 = 15.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
names(output)
names(expected_output)
test_data <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
dist1 = 4,
Hdist1 = 5.5,
max_height = 15.5
)
output <- get_effective_gap(test_data)
output
test_data <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
dist1 = 4,
Hdist1 = 5.5,
max_height = 15.5
)
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1_Eglin_zone1_CROWN"),
treeID = factor("1", levels = "1"),
dist1 = 4,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
output
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
dist1 = 4,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
test_data <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
dist1 = 4,
Hdist1 = 5.5,
max_height = 15.5
)
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
dist1 = 4,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
# Write the test
test_that("corrected_distances returns expected output with test data", {
expect_equal(output, expected_output)
})
output
expected_output
# Load your package
devtools::load_all("C:/LadderFuelsR/LadderFuelsR")
# Run tests
devtools::test()
# Get session info after tests
sessionInfo()
# Build and check the package
devtools::check()
# Get session info after check
sessionInfo()
test_data <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
dist1 = 4,
Hdist1 = 5.5,
max_height = 15.5
)
output <- get_effective_gap(test_data)
expected_output <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
dist1 = 4,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
Hcbh1 = 1.5,
Hcbh2 = 6.5,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
# Write the test
test_that("get_effective_gap returns expected output with test data", {
expect_equal(output, expected_output)
})
output
expected_output
str(output)
str(expected_output)
output$Hcbh1
expected_output$dist1
test_data <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
dist1 = 4,
Hdist1 = 5.5,
max_height = 15.5
)
output <- get_effective_gap(test_data)
library(LadderFuelsR)
output <- get_effective_gap(test_data)
original_column_names <- colnames(output)
# Specify prefixes
desired_order <- c("treeID", "Hcbh", "dptf","effdist","dist", "Hdist", "Hdptf", "max_")
# Identify unique prefixes
prefixes <- unique(sub("^([a-zA-Z]+).*", "\\\\1", original_column_names))
# Initialize vector to store new order
new_order <- c()
# Loop over desired order of prefixes
for (prefix in desired_order) {
# Find column names matching the current prefix
matching_columns <- grep(paste0("^", prefix), original_column_names, value = TRUE)
# Append to the new order
new_order <- c(new_order, matching_columns)
}
output <- output[, new_order]
output
test_data <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
dist1 = 4,
Hdist1 = 5.5,
max_height = 15.5
)
output <- get_effective_gap(test_data)
original_column_names <- colnames(output)
# Specify prefixes
desired_order <- c("treeID", "Hcbh", "dptf","effdist","dist", "Hdist", "Hdptf", "max_")
# Identify unique prefixes
prefixes <- unique(sub("^([a-zA-Z]+).*", "\\\\1", original_column_names))
# Initialize vector to store new order
new_order <- c()
# Loop over desired order of prefixes
for (prefix in desired_order) {
# Find column names matching the current prefix
matching_columns <- grep(paste0("^", prefix), original_column_names, value = TRUE)
# Append to the new order
new_order <- c(new_order, matching_columns)
}
output <- output[, new_order]
expected_output <- data.frame(
treeID1 = factor("1", levels = "1"),
treeID = factor("1_Eglin_zone1_CROWN"),
Hcbh1 = 1.5,
Hcbh2 = 6.5,
dptf1 = 1,
dptf2 = 8,
effdist1 = 4,
dist1 = 4,
Hdist1 = 5.5,
Hdptf1 = 1.5,
Hdptf2 = 14.5,
max_height = 15.5
)
# Write the test
test_that("get_effective_gap returns expected output with test data", {
expect_equal(output, expected_output)
})
library(covr)
report <- package_coverage()
report
library(LadderFuelsR)
report <- package_coverage()
library(LadderFuelsR)
